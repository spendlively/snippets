// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ElectionsClient is the client API for Elections service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ElectionsClient interface {
	SubmitVote(ctx context.Context, in *SubmitVoteRequest, opts ...grpc.CallOption) (*SubmitVoteResponse, error)
}

type electionsClient struct {
	cc grpc.ClientConnInterface
}

func NewElectionsClient(cc grpc.ClientConnInterface) ElectionsClient {
	return &electionsClient{cc}
}

func (c *electionsClient) SubmitVote(ctx context.Context, in *SubmitVoteRequest, opts ...grpc.CallOption) (*SubmitVoteResponse, error) {
	out := new(SubmitVoteResponse)
	err := c.cc.Invoke(ctx, "/elections.Elections/SubmitVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ElectionsServer is the server API for Elections service.
// All implementations must embed UnimplementedElectionsServer
// for forward compatibility
type ElectionsServer interface {
	SubmitVote(context.Context, *SubmitVoteRequest) (*SubmitVoteResponse, error)
	mustEmbedUnimplementedElectionsServer()
}

// UnimplementedElectionsServer must be embedded to have forward compatible implementations.
type UnimplementedElectionsServer struct {
}

func (UnimplementedElectionsServer) SubmitVote(context.Context, *SubmitVoteRequest) (*SubmitVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVote not implemented")
}
func (UnimplementedElectionsServer) mustEmbedUnimplementedElectionsServer() {}

// UnsafeElectionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElectionsServer will
// result in compilation errors.
type UnsafeElectionsServer interface {
	mustEmbedUnimplementedElectionsServer()
}

func RegisterElectionsServer(s grpc.ServiceRegistrar, srv ElectionsServer) {
	s.RegisterService(&Elections_ServiceDesc, srv)
}

func _Elections_SubmitVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElectionsServer).SubmitVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elections.Elections/SubmitVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElectionsServer).SubmitVote(ctx, req.(*SubmitVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Elections_ServiceDesc is the grpc.ServiceDesc for Elections service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Elections_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "elections.Elections",
	HandlerType: (*ElectionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitVote",
			Handler:    _Elections_SubmitVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "elections.proto",
}
