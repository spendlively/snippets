//////////////////////////////////////
////////////GOPATH, GOROOT////////////
//////////////////////////////////////
GOPATH
 - путь ко всем исходным кодам
 - если не задан, go будет искать исходники в /home/<username>/go
 - структура


$GOPATH/
    bin/ - скомпилированные исполняемые файлы
    pkg/ - скомпилированные библиотеки (кэш чтобы не пересобирать несколько раз)
    src/ - исходники и свои проекты


GOROOT
 - deprecated
 - в новых версиях устанавливать не нужно (зашита внутрь бинарника)
 - указывает где лежат иполняеыме файлы
 - полезно заходить по этому пути и читать исходники языка (написаны на go)


//go get
//выкачать проект из публичного git репозитория
//вызывать можно из любого места
//команда закачает библиотеку в GOPATH/src/github.com/golang/protobuf
//go get выкачивает master-ветку
//-d - download only - только скачать без установки и компиляции
//без -d после загрузки вызовет go install
go get -d github.com/golang/protobuf/...


//go install
 - компилирует указанный пакет и установить его в $GOPATH/pkg и $GOPATH/bin
go install github.com/golang/protobuf/...


//многоточия ...
 - означают "данный пакет и все дочерние пакеты"
 - применяется для go get, go install, go test


//go get -u
 - обновит пакеты с репозиторием
go get -u github.com/golang/protobuf/...


//go build
 - собирает один пакет
 - go build не собирает пакеты зависимости в директории $GOPATH/pkg
 - компилирует только то, что вы попросили
 - если в указанном пути есть пакет main, go build соберет исполняемый файл
 - если в указанном пути НЕТ пакета main, go build соберет библиотеку
 - с помощью "-o" можно указать куда пакет сохранить
go build -o /tmp/thelib.a github.com/beevik/ntp
file /tmp/thelib.a
//ar archive
go build -o /tmp/prog github.com/golang/protobuf/protoc-gen-go
file /tmp/prog
//elf


/home/<username>/go
    src
        github.com
            golang
                protobuf
                    source files

сборка
go get
go build
go install



////////////////////////////////////////////
//////////////крос-компиляция///////////////
////////////////////////////////////////////
//указание ос (переменная GOOS)
GOOS=windows go build -o /tmp/prog github.com/golang/protobuf/protoc-gen-go
//указание архитектуры (переменная GOARCH)
GOARCH=386 GOOS=darwin go build -o /tmp/prog github.com/golang/protobuf/protoc-gen-go

//GOOS & GOARCH values
https://gist.github.com/asukakenji/f15ba7e588ac42795f421b48b8aede63
(01_goarch_goos_values.md)



///////////////////////////////////////////
////////////модули и зависимости///////////
///////////////////////////////////////////
//Основные фичи модулей
 - поддержка версионирования
 - размещение кога вне GOPATH

//Поддержка модулей появилась в go 1.11

//Модуль go это
 - директория, в которой есть файлик go.mod
 - до go 1.13 директория должна была лежать вне GOPATH


//Создание модуля
//Можно выделить целый репозиторий для модуля или подкаталог репозитория
git clone github.com/user/name.git name
mkdir name/subdir
cd name/subdir
//вызываем go mod init
//указываем модулю путь, по которому он доступен в github
go mod init github.com/user/name/subdir
//теперь "github.com/user/name/subdir" это модуль
//путь "github.com/user/name/subdir" пользователи будут указывать при импорте


//Внутри модуля работают те же команды, что и внутри GOPATH
//Но немного по другому
//Если внутри модуля вызвать
//go get github.com/beevik/ntp
//библиотека скачается в
$GOPATH/pkg/mod/github.com/beevik/ntp@v0.2.0


//Структура go.mod файла
//название модуля
//нужно только для того, чтобы модуль был доступен извне
//можно написать произвольное название
module github.com/user/name

//версия go
go 1.13

//зависимости (пополняется автоматически)
//версии зависимостей фиксируются в момент добавления
require {
    github.com/beevik/ntp v0.2.0
}

//файлик с чек-суммой
go.sum


//версии
 - go используется семантику semver (0.1.0)



//Обновление зависимостей
1. go get зависимость
 - обновит зависимости в go.mod
2. go get tidy
 - рекомендуется
 - изменяет go.mod файл
 - пробегает по импортам в исходном коде,
удаляет ненужные зависимости и добавляет новые



//Скачивание зависимостей
 - происходит при вызове любой команды
 - go test, go run, go build, go install, итд



//go run file.go
 - компилирует, складывает скомпилированную
программу во временный каталог и запускает


//go help
список команд

//go help run
хелп по команде



///////////////////////////////////
////////форматирование кода////////
///////////////////////////////////
//go fmt file.go
отформатировать файл

//goimports
//удаляет ненужные импорты
//с ненужными импортами не скомпилируется код
//внутри себя вызывает go fmt
go get golang.org/x/tools/cmd/goimports
~/go/bin/goimports -w file.go


///////////////////////////////////
//////////////линтеры//////////////
///////////////////////////////////
//встроенный линтер
go vet file.go
go vet package

//популярный сторонний линтер
//есть разделение на фатальные ошибки и ворнинки
//-set_exit_status чтобы не игнорировать ворнинги
go get -u golang.org/x/lint/golint
~/go/bin/golint -set_exit_status file.go

//металинтеры
 - бертка запускающая несколько линтеров за один проход
go get github.com/golangci/golangci-lint/cmd/golangci-lint
~/go/bin/golangci-lint run file.go



///////////////////////////////////
///////////тестирование////////////
///////////////////////////////////
//Суффиксы у файлов go
file_386.go
file_amd64.go
file_linux.go

//файлы тестов
//содержат тесты
//не учавствуют в обычной компиляции
file_test.go

Суффикс _test не комбинируется с лругими

//Тесты к пакету лежат в самом пакете
чтобы можно было вызывать неэкспортированные функции

Функция называется TestFoo

///////////////////////////////////
//////////запуск теста/////////////
///////////////////////////////////
//тестирование текущей директории
cd path/to/package
go test

//Покрытие кода
go test -coverprofile=cover.out

//тестирование произвольного пакета
go get github.com/gorilla/mux
go test github.com/gorilla/mux

//тестирование пакета со вложенными пакетами
go test github.com/gorilla/mux/...



///////////////////////////////////
//////////пример теста/////////////
///////////////////////////////////
//mkdir foobar && cd foobar
//nano count.go



package foobar

func Count (s string, r rune) int {
    var cnt int
    for _, l := range s {
        if l == r {
            cnt += 1
        }
    }
    return cnt
}



//nano count_test.go
package foobar

import "testing"

func TestCount(t *testing.T){
    s := "qwertye"
    e := 2
    if c := Count(s, 'e'); c != e {
        t.Fatalf("bad count for %s; got %d expected %d", s, c, e)
    }
}



//go test



///////////////////////////////////
//////////пакет testify////////////
///////////////////////////////////
//вспомогательные функции
//более красивый вывод
github.com/stretchr/testify
