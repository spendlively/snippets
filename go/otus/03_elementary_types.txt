
//Явное и неявное объявление типа
var Storage = map[string]string
var storage map[string]string = make(map[string]string)
var storage = make(map[string]string)

//Инкапсуляция
//Storage - видно за пределами пакета
//storage - не видно за пределами пакета

type User struct {
    Name string //будет видно в json.Marshal (при маршалинге в json)
    pass string //не будет видно
}

//алиасы типов
byte = int8
rune = int32 (для символов unicode - можно складывать)

//Размер *int зависит от разрядности программы

slice - не ссылочный тип

В go нет автоматического преобразования типов.
Преобразование типов всегда явное.


/////////////////////////////////////////////////////////
//////////////////////////СТРОКИ/////////////////////////
/////////////////////////////////////////////////////////
//Многостроченая строка
str := `
"one"
'two'
`

////////////////////////
///Конкатенация строк///
////////////////////////
var buffer bytes.Buffer
for i := 0; i < 1000; i++ {
    buffer.WriteString("a")
}
fmt.Println(buffer.String())


///////////////////////////////
//Подсчет количества символов//
///////////////////////////////
import "unicode/utf8"
actualLength := utf8.RuneCountInString(value.String())


//Получить доступ к байту
s := "hello, world!"

//доступ по индексу будет гарантированно работать
//если вы точно знаете что там
//только латинские симвобы и пробелы

//доступ по индексу это именно доступ к БАЙТАМ
var c byte = s[0]

//поличиение подстроки по индексу возвращает БАЙТЫ
var substr string = s[5:10]

//узнать длину в БАЙТАХ
l := len(s)

//строки неизменяемы, поэтому конкатенация - дорогая операция
s2 := s + " two"


//unicode vs utf8
unicode - большой расширенный алфавит
utf8 - способ как unicode представлять


//Итерация по байтам
for i := 0; i < len(str); i++ {
    b := s[i]
}

//Итерация по рунам (буквам)
for i, r := range s {
    //i может быть  2, 4, 6, ...
    //r = rune (int32)
    fmt.Printf("%v, %v %v\n", i, string(r), strconv.QuoteRune(r))
}



/////////////////////////////////////////////////////////
//////////////////////Пакет String///////////////////////
/////////////////////////////////////////////////////////
//Пакет string для работы со строками
//Проверка наличия подстроки
Contains(s, substr string) bool

//Проверка что строка ничинается с
HasPrefix(s, prefix string) bool

//Склейка строк
Join(a []string, sep string) string

//Разбить строку по разделителю
Split(s, sep string) []string


//Эффективная склейка строк
var b strings.Builder
for i := 33; i > 0; i-- {
    b.WriteString("Код")
    b.WriteRune('ъ')
}
result := b.String()

fmt.Println(result) //КодъКодъКодъКодъКодъКодъКодъКодъ...


/////////////////////////////////////////////////////////////
/////////////////////////Константы///////////////////////////
/////////////////////////////////////////////////////////////
//Нетипизированная константа
const Pi = 3

//Типизированная константа
const pi float32 = 3.14

//Несколько констант
const (
    one = 1 //1
    one2 //1
    three = 3 //3
    three2 //3
)
fmt.Printf("%d %d %d %d\n", one, one2, three, three2)


const (
//    _ = iota //0
    one = iota //0
    two //1
    three //2
    five = 5 //5
    six //5
)
fmt.Printf("%d %d %d %d %d\n", one, two, three, five, six)


const (
    _ = iota * 2
    one = iota //0
    two //1
    three //2
    five = 5 //5
    six //5
)
fmt.Printf("%d %d %d %d %d\n", one, two, three, five, six)

//можно задать любую формулу
const (
    zero = iota * 2 //0
    two //2
    four //4
    six //6
    eight //8
)
fmt.Printf("%d %d %d %d %d\n", zero, two, four, six, eight)








