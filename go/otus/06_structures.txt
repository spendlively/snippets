
///////////////////////////////////////////////
//////////////////Структуры////////////////////
///////////////////////////////////////////////

//Пустая структура (не занимает памяти)
struct{}

//две пустые структуры не равны друг другу


//Структура с именованными полями
type User struct {
    Id int64
    Name string
    Age int
    friends []int64 //приватный элемент
}


//Анонимная структура
s := struct{}{}
s := struct{x, y int}{1, 2}


//Рекурсивная структура
type Name struct {
    //Нельзя
    //prev Name
    //Можно
    prev *Name
}



//Инициализация структуры
u1 := User{}
pu2 := &User{}

//Обязательно указывать все поля
u3 := User{1, "ivan", 20, []int64{}}
u4 := User{1, "ivan", 20, nil}

u5 := User{
    Id: 1,
    Name: "ivan",
    Age: 20,
    friends: nil,
}
//Поля можно пропустить
u6 := User{
    Id: 1,
}



///////////////////////////////////////////////
///////////Анонимные типы и структуры//////////
///////////////////////////////////////////////

//Слайс из анонимных типов и структур
var s []struct{name string; age int}



//Вложенная анонимная структура
//Объявление
type User struct {
    Id int64
    Name string
    address struct {
        city string
    }
}

func main() {
    //Инициализация
	s := User{
		Id: 1,
		Name: "ivan",
		address: struct {
		        city string
		}{
			city: "Novosib",
		},
	}
	fmt.Println(s)
}



//Массив анонимных вложенных структур
type User struct {
	Id      int64
	Name    string
	address []struct {
		city string
	}
}

func main() {
	s := User{
		Id:   1,
		Name: "ivan",
		address: []struct {
			city string
		}{
			{
				city: "Nsk",
			},
		},
	}
	fmt.Println(s)
}



/////////////////////////////////////
/////////Десериализация json/////////
/////////////////////////////////////
//тег
 - метаинформация
 - передается в рантайм или компилятору
 - `json:"ok"`


data := []byte(`
{
    "ok": true,
    "total": 3,
    "documents": [
        {"id": 1, "title": "java"},
        {"id": 1, "title": "go"},
        {"id": 1, "title": "c++"}
    ]
}
`)

var resp struct {
    Ok bool `json:"ok"`
    Total int `json:"total"`
    Documents []struct{
        Id int `json:"id"`
        Title string `json:"title"`
    } `json:"documents"`
}

err := json.Unmarshal(data, &resp)

if err != nil {
    panic(err)
}

fmt.Println(resp)



/////////////////////////////////////
////////////Выравнивание/////////////
/////////////////////////////////////
 - процессоры быстрее получают адреса которые выровнены на 16 байт
 - поэтому поля внутри структуры выравниваются на 16 байт
 - общее правило: сначало должны идти маленькие поля, потом большие



/////////////////////////////////////
/////////////Указатели///////////////
/////////////////////////////////////
 - все указатели строго типизированы
 - zero value = nil
 - нет адресной арифметики
 - можно получить адрес всего кроме  значения словаря

//объявление
var a *int //nil
var b *int = new(int) //0xадрес
//*b = 0



//ВАЖНО
//Указатель на структуру
 - по указателю на структуру
можно обращаться к полям структуры
без разыменования через точку
s := struct{x, y int}{1,2}
p := &s

fmt.Println(s.x)
fmt.Println(p.x)
//c++: p->x



//ВАЖНО
//разыменование nil указателя вызывает panic

var i *int
//pi := *i //panic

var j *int = new(int)
pj := *j //o



//Присваивание структуры
 - при присваивании структура копируется
s1 := struct{x int}{1}
s2 := s1
s2.x = 2

fmt.Println(s1, s2) //{1}, {2}



//Конструктор
 - функция (не метод), кот. возвращает ссылку на структуру
 - рекоммендация всегда делать конструктор



//Встраивание
 - аналог наследование структур
 - поддерживает множественное встраивание
type A struct {
    c int
}

type B struct {
    A
}

s := &B{}

//Если в "B" нет поля "c", то вызовется s.A.c, иначе s.c
s.c = 1
s.A.c = 2

fmt.Println(s) //{{2}}



//use case
type B struct {
    A
    sync.Mutex
}

b := B{}
b.Mutex.Lock()
//или
b.Lock()



///////////////////////////////////////////////
/////////////////////ТЭГИ//////////////////////
///////////////////////////////////////////////
 - строка с метаинформацией
 - соглашение о структуре тэга
`key:"value" key2:"value2,value22"`



//Сериализация и reflection с помощью тегов
type User struct{
    Id int64 `json:"-"` //игнорировать
    Name string `json:"name"`
    Age int `json:"age"`
}

u := User{1, "ivan", 33}
fmt.Println(u)

js, err := json.Marshal(u)
if err != nil {
    panic(err)
}
fmt.Println(string(js))

ut := reflect.TypeOf(u)
ageField, _ := ut.FieldByName("Age")
//jsonSettings := ageField.Get("json")
fmt.Println(ageField)
//fmt.Println(jsonSettings)

