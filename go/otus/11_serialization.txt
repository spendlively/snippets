
//base64
data := "Hello world"
//Std кодировка - для передачи всего
sEnc := b64.StdEncoding.EncodeToString([]byte(data))
fmt.Println(sEnc)
sDec, _ := b64.StdEncoding.DecodeString(sEnc)
fmt.Println(string(sDec))
fmt.Println()
//URL кодировка - для передачи через url
uEnc := b64.URLEncoding.EncodeToString([]byte(data))
fmt.Println(uEnc)
uDec, _ := b64.URLEncoding.DecodeString(uEnc)
fmt.Println(string(uDec))


//Закодировать в base64
input := []byte("foo\x00bar")
encoder := base64.NewEncoder(base64.StdEncoding, os.Stdout)
encoder.Write(input)
encoder.Close()



//Раскодировать из base64
input := "Zm9vAGJhcg=="
r := base64.NewDecoder(base64.StdEncoding, strings.NewReader(input))
io.Copy(os.Stdout, r)



//Преобразования в json:
type Person struct {
	Name string
	//Важно
	//json.Marshal работает через рефлексию и не видит приватные поля
	age int
	Job struct {
		Department string
		Title      string
	}
}

func main() {
	p1 := &Person{
		Name: "Vasya",
		age:  36,
		Job: struct {
			Department string
			Title      string
		}{Department: "Operations", Title: "Boss"},
	}
	j, err := json.Marshal(p1)
	if err != nil {
		fmt.Printf("%v\n", err)
		return
	}
	fmt.Printf("p1 json %s\n", j)
	var p2 Person
	json.Unmarshal(j, &p2)
	fmt.Printf("p2: %v\n", p2)
}



//Пример использования тегов
type Person struct {
    Name    string `json:"fullname,omitempty"`
    Surname string `json:"familyname,omitempty"`
    Age     int    `json:"-"`
    Job     struct {
        Department string
        Title      string
    }
}



//Правило json.Marshal
 - `json:"fullname,omitempty"`
 - не должно быть пробела: "fullname,omitempty"
 - вариант без имени поля: `json:",omitempty"`
 - чтобы пропустить поле: `json:"-"`
 - omitempty - не выводить поле, если оно пустое
 - если поле структуры приватное (начинатся с маленькой буквы),
json.Marshal не увидит его, т.к. json.Marshal работает через рефлексию



//Преобразование в xml
type Address struct {
	City, State string
}
type Person2 struct {
	XMLName   xml.Name `xml:"person"`
	Id        int      `xml:"id,attr"`
	FirstName string   `xml:"name>first"`
	LastName  string   `xml:"name>last"`
	Age       int      `xml:"age"`
	Height    float32  `xml:"height,omitempty"`
	Married   bool
	Address
	Comment string `xml:",comment"`
}

func main() {
	v := &Person2{Id: 13, FirstName: "John", LastName: "Doe", Age: 42}
	v.Comment = " Need more details. "
	v.Address = Address{"Hanga Roa", "Easter Island"}

	enc := xml.NewEncoder(os.Stdout)
	enc.Indent("  ", "    ")
	enc.Encode(v)
}



//Преобразование из xml
type Email struct {
	Where string `xml:"where,attr"`
	Addr  string
}
type Address2 struct {
	City, State string
}
type Result struct {
	XMLName xml.Name `xml:"Person"`
	Name    string   `xml:"FullName"`
	Phone   string
	Email   []Email
	Groups  []string `xml:"Group>Value"`
	Address2
}

func main() {
	v := Result{Name: "none", Phone: "none"}

	data := `
		<Person>
			<FullName>Grace R. Emlin</FullName>
			<Company>Example Inc.</Company>
			<Email where="home">
				<Addr>gre@example.com</Addr>
			</Email>
			<Email where='work'>
				<Addr>gre@work.com</Addr>
			</Email>
			<Group>
				<Value>Friends</Value>
				<Value>Squash</Value>
			</Group>
			<City>Hanga Roa</City>
			<State>Easter Island</State>
		</Person>
	`
	xml.Unmarshal([]byte(data), &v)
	fmt.Printf("%v\n", v)
}



//Бинарные сериализаторы
 - gob
 - msgpack
 - protobuf //дефакто по умолчанию (используется в grpc по дефолту)



//easyjson
 - библиотека от mail.ru
 - работает через кодогенерацию (json.Marshal работает через рефлексию)
 - быстрее чем json.Marshal
