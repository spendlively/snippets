
//////////////////////////////////
////////////Контекст//////////////
//////////////////////////////////

//Контекст
 - используется для остановки горутины по таймауту
 - изначально контекст был реализован в сторонней библиотеки
 - сейчас контекст - часть стандартной библиотеки
 - контексты вкладываются друг в друга (как матрешка)
 - используется для отмены горутин как минимум и для передачи параметров
 - import "context"
 - механизм ограничения времени запроса
 - контекст - структура, кот. можно создать при помощи ряда функций (ниже)



//Виды контекстов
//2 пустых контекста
//1. Создает пустой контекст
func Background() Context

//2. Создает пустой контекст который в дальнейшем нужно реализовать
func TODO() Context

//3 вида непустых контекста
//3. возвращает контекст и функцию, кот можно вызвать для ручной отмены
func WithCancel(parent Context) (ctx Context, cancel CancelFunc)

//4. передается дата отмены контекста
func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)

//5. передается продолжительность времени, через которое контекст будет отменен
//под капотом вызывает WithDeadline
func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)

//6. используется вместе в middleware
//обычно туда передают сессию и данные аутентификации
func WithValue(parent Context, key interface{}, val interface{}) Context



//
