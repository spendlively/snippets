

go test -bench=. -benchmem -cpuprofile=cpu.out -memprofile=mem.out .



//Преаллокация slices и map
func Fast() {
    const sz = 32000
    a := make([]int, 0)
    for i := 0; i < sz; i++ {
        a = append(a, i)
    }
}

func Slow() {
    const sz = 32000
    a := make([]int, 0, sz)
    for i := 0; i < sz; i++ {
        a = append(a, i)
    }
}



//strconv vs fmt
func Slow() string {
    return fmt.Sprintf("%d", 42) // Reflection
}

func Fast() string {
    return strconv.Itoa(42)
}



//Переиспользование объектов
ype A struct {
    I int
}

func Slow() {
    for i := 0; i < 1000; i++ {
        a := &A{}
        json.Unmarshal([]byte("{\"i\": 32}"), a)
    }
}

func Fast() {
    a := &A{}
    for i := 0; i < 1000; i++ {
        json.Unmarshal([]byte("{\"i\": 32}"), a)
    }
}



//strings vs regex
var re *regexp.Regexp
func Fast() bool {
    return strings.Contains("Hello world of golang", "world")
}

func VerySlow() bool {
    res, _ := regexp.MatchString("world", "Hello world of golang")
    return res
}

func Slow() bool {
    return re.MatchString("Hello world of golang")
}

func init() {
    re, _ = regexp.Compile("world")
}



//StringBuilder
func Slow() string {
    a := ""
    a += "1"
    a += "2"
    a += "3"
    a += "4"
    a += "5"
    return a
}

func Fast() string {
    builder := strings.Builder{}
    builder.WriteString("1")
    builder.WriteString("2")
    builder.WriteString("3")
    builder.WriteString("4")
    builder.WriteString("5")
    return builder.String()
}

func VeryFast() string {
    return "1" + "2" + "3" + "4" + "5"
}



//sync.Pool
var pool = sync.Pool{
    New: func() interface{} {
        return &strings.Builder{}
    },
}

func Slow() string {
    builder := strings.Builder{}
    builder.WriteString("Hello")
    return builder.String()
}

func Fast() string {
    builder := pool.Get().(*strings.Builder)
    defer pool.Put(builder) // Try to comment it out!
    builder.Reset()
    builder.WriteString("Hello")
    res := builder.String()
    return res
}



//Структуры с указателями как часть map
const numElements = 10000000
var foo = map[string]int{}
func timeGC() {
    t := time.Now()
    runtime.GC()
    fmt.Printf("gc took: %s\n", time.Since(t))
}

func main() {
    for i := 0; i < numElements; i++ {
        foo[strconv.Itoa(i)] = i
    }

    for {
        timeGC()
        time.Sleep(1 * time.Second)
    }
}
//Держать в heap много структур с указателями дорого.



//Кодогенерация vs рефлексия
var JsonExample = []byte("{\"I\": 10}")
//easyjson:json
type A struct {
    I int
}

func StandardMarshal() {
    a := &A{15}
    json.Marshal(a)
}

func StandardUnmarshal() {
    a := &A{}
    json.Unmarshal(JsonExample, &a)
}

func EasyMarshal() {
    a := &A{15}
    a.MarshalJSON()
}

func EasyUnmarshal() {
    a := &A{}
}



//Переиспользование HTTP-соединений
var client = http.Client{
    Timeout: 3 * time.Second,
    Transport: &http.Transport{},
}

func Fast() ([]byte, error) {
    resp, err := client.Get("https://api.vk.com/method/users.get")
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    return body, nil
}



//Нагрузчное тестирование (wrk)
//https://github.com/wg/wrk
$ wrk -c100 -d10s -t50 http://127.0.0.1:8080/



//Библиотека net/http
http.HandleFunc("/", func (w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hello, world!\n\n")
})
http.ListenAndServe(":8080", nil)



//Библиотека fasthttp
func main() {
    h := requestHandler
    h = fasthttp.CompressHandler(h)
    if err := fasthttp.ListenAndServe("127.0.0.1:8080", h); err != nil {
        log.Fatalf("Error in ListenAndServe: %s", err)
    }
}

func requestHandler(ctx *fasthttp.RequestCtx) {
    fmt.Fprintf(ctx, "Hello, world!\n\n")
}



//pprof - работаем с консолью
//-x
go test -bench=. -benchmem -cpuprofile=cpu.out -memprofile=mem.out -x .
go tool pprof 13_pprof_console.test cpu.out
go tool pprof 13_pprof_console.test mem.out

