//Всего есть 3 изолированных слоя
1. Представление (Presentation): отображение пользователю
2. Домен (Domain): Бизнес-логика, весь функционал
3. Источник данных (Data Source): Часть системы которая отвечает за СУБД

//1. ШАБЛОНЫ ПРЕДСТАВЛЕНИЯ (PRESENTATION)
1. Модель, представление, контроллер (MVC)

//1.1 Модель (1), представление (2), контроллер (3) (MVC)
Есть 100 реализаций и трактовок
Хорошо для веба
Модель - некоторый элемент домена
Представление - то как все показывается пользователю
Контроллер - принимает заросы пользователя, выбирает модель, представление,
наполняет представление моделью и отдает

                |                            |
                |  --->  Представление  -->  |
                |          |     |           |
                |         \|/   /|\          |
                |          |     |           |
                |         Контроллер         |
                |          |     |           |
                |         \|/   /|\          |
                |          |     |           |
                |           Модель           |
                |                            |
Пользователь    |Представление (Presentation)| Домен

//Шаблоны контроллеров
1. Контроллер страниц (Page Controller)
2. Контроллер запросов (Front Controller)

1.1.3.1 Контроллер страниц (Page Controller)
Web 1.0
Получает запрос, разбирает URL, URI, отдает страницу
Вся логика в странице

//Плюсы
- Простота
- Изоляция

//Минусы
- Плохая гибкость
- Быстрый рост числа страниц

1.1.3.2 Контроллер запросов (Front Controller)
Получает запрос, разбирает, выбирает нужную модель.
Реализуется не конкретной страницей, а какой-то бизнес-логикой

//Плюсы
- Большая гибкость

//Минусы
- Плохая изоляция
- Сложность реализации

//Шаблоны представлений (View)
1. Представление по шаблону (Template View)
2. Представление с преобразованием (Transform View)

1.1.2.1. Представление по шаблону (Template View)
Шаблонизаторы html

//Плюсы
- Большая гибкость
- Наглядность

//Минусы
- Опасность спагеттикода при использовании скриптлетов
- Возможны побочные эффекты
- Сложность верстки

1.1.2.2. Представление с преобразованием (Transform View)
Обычно конкректная технология, например XML + XSLT

//Плюсы
- Большая гибкость
- Изоляция представления
- Не дублируется код

//Минусы
- Сложность верстки
- Доп технологии

//2. ШАБЛОНЫ ДОМЕНА
1. Сценарий транзакции (Transaction script)
2. Модель предметной области (Domain model)
3. Слой служб (Service layer)

//2.1 Сценарий транзакции (Transaction script)
Воплощение императивного подхода
                |                           |
                | --> Процедура (Экшн)  --> |
                |                           |
                | --> Экшн 2 --> Экшн 3 --> |
                |                           |
Представление   |           Домен           | Источник данных

//Плюсы:
- Простота реализации
- Интуитивность

//Минусы:
- Тяжело описывать сложную логику
- Тяжело следить за дублированием кода
- Плохая изоляция представления от осточника данных

//2.2 Модель предметной области (Domain model)
Воплощение объектно-ориентированной парадигмы
Объекты в домене, отвечечающие за реальные объекты физического мира
                |                   |
                | --> Объект 1      |
                |          |        |
                |         \|/       |
                |          |        |
                |     Объект 2 -->  |
                |          |        |
                |         /|\       |
                |          |        |
                | --> Объект 3      |
                |                   |
Представление   |       Домен       | Источник данных


//Плюсы:
- Хорошо описывает сложную логику
- Обеспечивает хорошую изоляцию

//Минусы:
- Сложна в реализации
- Возможны проблемы с эффективностью

//2.3 Слой служб (Service layer)
Модель предметной области поверх которой навернут сценарий транзакции
                |                                           |
                | --------> Экшн 1 ------->  Объект 1       |
                |                               |           |
                |                              \|/          |
                |                               |           |
                | --> Экшн 2 --> Экшн 3 -->  Объект 2  -->  |
                |                               |           |
                |                              /|\          |
                |                               |           |
                | --------> Экшн 4 ------->  Объект 3       |
                |                                           |
Представление   |                   Домен                   | Источник данных

//Плюсы:
- Хорошо описывает сложную логику
- Хорошо реализует сценарии использования
- Обеспечивает отличную изоляцию

//Минусы:
- Сложна в реализации
- Возможны проблемы с эффективностью

//Выбор паттерна слоя домена
//между "сценарием транзакции" и "Моделью предметной области"
- Сложная логика -> Модель предметной области
- Несложная логика -> Сценарий транзакции

//3. ШАБЛОНЫ ИСТОЧНИКА ДАННЫХ (ORM ObJECT RELATION MAPPING)
1. Шлюз таблицы данных (Table data gateway)
2. Шлюз записи данных (Row data gateway)
3. Преобразователь данных (Data mapper)
Цель: скрестить объекты реального мира и объекты СУБД
Если хочется избежать проблем с преобразованиями данных,
шлюзами записи данных и т.д., то нужно использовать нереляционную СУБД

//3.1 Шлюз таблицы данных (Table data gateway)
Один объект, отвечающий за одну таблицу
Обычно реализует CRUD операции
                |                           |
                | --> Объект таблицы 1 -->  |
                |              |            |
                |             \|/           |
                |              |            |
                |     Объект таблицы 2 -->  |
                |              |            |
                |             /|\           |
                |              |            |
                | --> Объект таблицы 3 -->  |
                |                           |
Домен           |      Источник данных      | Источник данных (СУБД)

//Подходящие паттерны домена
- Сценарий транзакции (Transaction script)
- Модель предметной области (Domain model)

//3.2 Шлюз записи данных (Row data gateway)
Объектами являются не таблицы а записи в таблицах
Таблица является классом, когда берешь инстанс этого класса, получаешь запись
Если в объекте много бизнесс логики, то слой домена слипается со слоем источника данных,
получается активная запись (Active record)
                |                           |
                | --> Объект записи 1 -->   |
                |              |            |
                |             \|/           |
                |              |            |
                |     Объект записи 2 -->   |
                |              |            |
                |             /|\           |
                |              |            |
                | --> Объект записи 3 -->   |
                |                           |
Домен           |      Источник данных      | Источник данных (СУБД)

//Подходит для всех паттернов домена

//3.3 Преобразователь данных (Data mapper)
Преобразует объекты домена в объекты испточника данных, либо наоборот
Знает и про слой домена и про слой субд, а про него никто не знает
Обычно используют что-то готовое и достругивают напильником
                | ---> |        | ---> |
                | ---> | Data   | ---> |
                | ---> | Mapper | ---> |
                | ---> |        | ---> |
Домен           |    Источник данных   | Источник данных (СУБД)

//Подходящие паттерны домена
- Сценарий транзакции (Transaction script)
- Слой служб (Service layer)


обработка исключительных ситуаций
тестируемость
