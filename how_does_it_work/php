
//Характеристики PHP
 - тьюринг полный (полный по Тьюрингу) язык программирования - на нем можно реализовать любую вычислимую функцию
 - императивный
 - мультипарадигменный



//Типизация
PHP 5 - слаботипизированный, а PHP 7 - постепенно-типизированный (позаимствовано у hack - facebook) ЯП



//Тип исполнения
 - PHP - транслирующий интерпретатор (как python)
 - код сначала транслируется в байт-код, который затем интерпретируется
 - из коробки байт-код не кешируется - это достигается расширениями:
    - APC (Alternative PHP Cache) - PECL - Поддерживает PHP4 и PHP5, включая 5.3 и 5.4 - разработка прекращена
    - Zend OPcache (ранее Zend Optimizer+) - включен по умолчанию начиная с PHP 5.5 (в версиях 5.2, 5.3 и 5.4. поддерживается как расширение PECL)
    - XCache
    - eAccelerator - проприетарный проект
    - PhpExpress
 - из коробки в PHP нет JIT-компилятора (как в python) - должен появиться в PHP 8
 - JIT для php есть в HHVM (Hip Hop Virtual Machine - содержит JIT компилятор, переводит код на C++ с последующим исполнением)
 - Phalanger - позволяет компилировать PHP в байткод CLI для разработке на .NET



//Архитектура
 - PEAR и PECL - репозитории/пакетные менеджеры расширений для php
 - Packagist.org - репозиторий библиотек написанных на php
 - Composer - пакетный менеджер для Packagist.org



//Интеграция с веб-сервером
 - модуль для apache
 - fast-cgi (PHP-FPM - php fast-cgi process manager)



//Версии PHP
 - thread safe (потокобезопасная версия php,-
используется только в том случае если apache работает в режиме Worker MPM -
использует потоки, чтобы работать в мультипоточном окружении)
    - x64
    - x32
 - non thread safe (используется обычно всегда всеми, чтобы не нарваться на какой-то thread safe баг)
    - x64
    - x32



//Ответ клиенту
В любом месте в php можно отдать ответ пользователю и продолжить выполнения скрипта дальше настолько, насколько это нужно


//Ahead-of-Time (AOT) компилятор
Вид транслятора, который использует метод компиляции перед исполнением.
Применяется как для компиляции высокоуровневых языков (например, Си, С++ или Паскаль),
так и для компиляции «промежуточных» языков, таких как байт-код Java, .NET Common Intermediate Language (CIL)...



//JIT-компиляция
Технология увеличения производительности, путём компиляции байт-кода в машинный код или в другой формат непосредственно во время работы программы.
Таким образом достигается высокая скорость выполнения по сравнению с интерпретируемым байт-кодом.
Являсь формой динамической компиляции, позволяет применять адаптивную оптимизацию и динамическую рекомпиляцию.
Проекты LLVM, GNU Lightning[2], libJIT (часть проекта DotGNU) и RPython (часть проекта PyPy) могут быть использованы для создания JIT-интерпретаторов любого скриптового языка.
JIT используется в реализациях Java, JavaScript, .NET Framework, в одной из реализаций Python — PyPy.
Наиболее распространённые интерпретаторы языков PHP, Ruby, Perl, Python и им подобных, имеют ограниченные или неполные JIT.

Большинство реализаций JIT имеют последовательную структуру:
 - сначала приложение компилируется в байт-код виртуальной машины среды исполнения (AOT-компиляция),
 - а потом JIT компилирует байт-код непосредственно в машинный код.
В итоге при запуске приложения тратится лишнее время, что впоследствии компенсируется более быстрой его работой.



//SAPI (Server API)
Внешний уровень абстракции, предназначенный для встраивания интерпретатора в другие приложения,
отвечает за его работу (запуск, остановка, передача скриптов на исполнение, доступ к внешним данным).
Существует несколько основных SAPI определяющих способы запуска и использования PHP:
 - модуль к веб-серверу
    - интерпретатор PHP выполняется в окружении процесса веб-сервера
    - Веб-сервер управляет количеством запущенных процессов PHP и сообщает им какие скрипты требуется исполнить
 - CGI SAPI
    - запуск нового процесса для обработки каждого запроса
    - веб-сервер запускает ./php-cgi /path/to/script.php
    - интерпретатор PHP исполняет только один скрипт, после чего заканчивает свою работу
    - затраты на запуск процесса интерпретатора и его инициализацию сопоставимы или даже превышают затраты на исполнение PHP скрипта
 - FastCGI (на замену cgi)
    - PHP интерпретатор запускается как независимый сервер, обрабатывающий запросы на исполнение PHP скриптов по протоколу FastCGI
    - позволяет работать с любым веб-сервером поддерживающим этот протокол
 - FPM SAPI
    - реализация протокола FastCGI
    - Андрей Нигматулин (Badoo)
    - возможность перезапуска пула интерпретаторов PHP без потери запросов
    - запуск нескольких пулов под разными пользователями
    - аварийный перезапуск интерпретаторов в случае проблем с ними
    - режим динамического управления числом запущенных процессов PHP (по принципу управления числом процессов в Apache)
    - с версии PHP 5.3.3 включён в PHP как отдельное SAPI
 - CLI SAPI
    - скрипт выполняется в окружении вызвавшего пользователя
    - с версии 5.4 появилась возможность запуска PHP как отдельного HTTP сервера (запускает только один процесс и выполняет все запросы исключительно последовательно)


/**
 * @TODO
**/
//Оптимизация Apache (Worker MPM, ...)
//password_hash password_verify