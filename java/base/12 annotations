
Аннотации создаются с помощью механизма основанного на интерфейсе.
@interface MyAnno {
    String str();
    int val();
}

Аннотации состоят только из объявлений методов.
Тела методов не определяются,- они реализуются средствами Java.
Методы ведут себя аналогичнополям.

Объявление аннотации не может включать в себя ключевое слово extends.
Но все аннотации автоматически расширяют интерфейс Annotation.

Аннотировать можно классы, методы, поля, параметры, константы перечислимого типа и сами аннотации.


Аннотирование метода
@MyAnno(str = "Пример аннотации", val = 100)
public static void myMeth(){
    //...
}


Правила удержания аннотаций - момент, когда аннотация отбрасывается
 - SOURCE - аннотации содержатся в исходном коде и отбрасываются при компиляции.
 - CLASS - сохраняются в файле байткода .class во время компиляции.
 - RUNTIME - сохраняются в файле байткода .class во время компиляции и доступны
для виртуальной машины jvm.

Но аннотации объявлен ий локальных переменных не удерживаются в файле с расширением class.

Правило удержания задается с помощью аннотации @Retention
(по умолчанию CLASS)
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno {
    String str();
    int val();
}


Если аннотации задают правило удержания RUNTIME,
то они могут быть опрошены во время выполнения
в любой программе нa Java с помощью рефлексии.


Объект типа Class предатсвляет класс, аннотацию которого требуется получить.
Требуется вызвать метод getClass() определенный в классе Object.
Также есть методы: getMethod(), getField() и getConstructor()

//Чтобы получить аннотацию метода
getClass
getMethod
getAnnotation
Annotation[] getAnnotations() //Получить все аннотации


Значение по умолчанию
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno{
    String str() default "Тестирование";
    int val() default 9000;
}


Аннотации Маркеры - не содержат членов
Проверка есть ли аннотация
isAnnotationPresent()


Одночленные аннотации
@Retention(RetentionPolicy.RUNTIME)
@interface MyAnno{
    int value();
}
Получение значения
anno.value()


Встроенные аннотации
java.lang.annotation
 - @Retention - правило удержания для др аннотаций
 - @Documented - аннотация должна быть документирована
 - @Target
 - @Inherited
 - @Repeatable
 - @Native
java.lang
 - @Override
 - @Deprecated
 - @FunctionalInterface
 - @SafeVarargs
 - @SuppressWarnings


Типовые Аннотации
 - могут указываться везде, где применяются типы данных
 - позволяют выполнять дополнительные проверки прикладного кода
различными и нструментальными средствами на стадии разработки,
чтобы предотвратить ошибки

Примеры:
 - аннотирование типа, возвращаемого методом
 - тип объекта по ссылке this в теле метода
 - приведение типов
 - уровни доступа к массиву
 - наследуемый класс
 - оператор throws
 - обобщенные типы, включая границы параметров и аргументы обобщенного типа


Повторяющиеся аннотации


Ограничение на аннотации
1. Аннотация не может наследовать другую
2. Аннотация не может иметь параметры
3. Аннотации должны возвращать один из перечисленных типов
 - примитивный тип наподобе int или double
 - объект класса String или Class
 - перечислимый тип
 - тип другой аннотации
 - массив одного из предыдущих типов


