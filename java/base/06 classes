Ссылки на объекты java подобны указателям с с++.
Но ими нельзя манипулировать как целочисленными значениями в отлличае от указателей и ссылка не может указывать на произвольную ячейку памяти,

Оператор new динамически выделяет оперативную память для объекта

Конструктор не имеет возвращаемого типа, даже типа void, а его имя совпадает с именем класса.

class Box{
  int x;
  Box(int y){
    x = y;
  }
}

class Box{
  int x;
  Box(int x){
    this.x = x;
  }
}

Деструктор
protected void finalize(){}
f не вызывается при выходе объекта из области действия как в с++, а вызывается лишь непосредственно перед сборкой мусора и на него не стоит расчитывать.

Перегрузка 
Методы или конструктопы с одинаковым именем, разными типами параметров или количеством параметров.
Методы могут возвращать разные типы данных.
Возвращаемый тип не влияет на поиск подходящего метода.

Если отсутствует метод с нужным количеством параметров (пр. int), аргумент неявно преобразуется к другому типу (пр.  double) и вызовется соотв метод

Для инициализации статических данных может использоваться статический блок, кот. будет вызван единожды при инициализации класса
static {
  b = a × 4;
}

Поле может быть помечена как final, что делает его константой
final int x = 1;
Инициализируется оно во время объявления или в конструкторе.

Длина массива
a.length

Вложенные классы
Область действия - внешний класс.
Имеет доступ к свойствам внешнего класса.
Внешний класс не имеет доступа к свойсьвам внутреннего.
Статический: называется внутренний класс, может ссылаться только на статические свойства внешнего.
Не статический - может ссыллаться на все свойства.

class Outer { 
  int outer х 100; 
  void test(){ 
    Inner inner = new Inner(); 
    inner.display();
  }
  class Inner { 
    void display () { 
      System.out.println(outer_x); 
    }
  }
}

Экземпляр класса Inner может быть создан только в контексте класса Outer.

Внутренний класс можно также объявить в любом блоке кода.

