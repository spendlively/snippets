
//Схемы
1. Простая схема
 - приложение через драйвер общается с mongod
 - mongod принимает запросы, обрабатывает и выполняет
 - mongod хранит данные в чанках (chunks)

2. Шардированная схема без реплика сетов
 - приложение через драйвер общается с роутером mongos
 - mongos общается с шардами (shard1, shard2)
 - в шарде находится mongod

 - данные попадают в чанки по определенному диапазону заданного поля — shard key
 - сначала создается 1 чанк с диапазоном значений [-∞, +∞]
 - когда размер достигает chunksize, mongos делит чанк, чтобы данные были разделены поровну [-∞, значение] и [значение, +∞]
 - при появлении новых документов, они будут записываться в чанк, который соответствует диапазону shardKey
 - по достижению chunksize разделение произойдет снова и диапазон будет еще уже
 - все чанки хранятся на шардах
 - при достижении чанком неделимого диапазона (пр: [44, 45]), чанк будет расти свыше chunksize

3. Шардированная схема с реплика сетами
 - приложение через драйвер общается с роутером mongos
 - mongos общается с шардами (shard1, shard2)
 - в шарде находится replica-set
 - replica-set работает с master (primary), repl1 и repl2 (slaves)

 - операции записи, удаления, обновления, попадают в мастер
 - записываются в специальную коллекцию oplog
 - асинхронно попадают на реплики — repl.1 и repl.2

 - избыточность => безопасность данных
 - мастер и реплики могут располагаться в разных дата центрах
 - реплики могут использоваться для более эффективного чтения данных


//mongod
 - основной процесс mongoDB, задача - прием запросов, обработка и выполнение
 - данные в mongod хранятся в чанках (chunks)

//chunks
 - каждый chunk имеет размер “chunksize” (default = 64 MB)
 - чанки хранятся в файлах dbName.n (n — порядковый номер с 0)
 - при достижении chunksize chunk делится пополам
 - dbName.0=64Mb, dbName.1=128Mb, dbName.2=256Mb, dbName.3=512Mb, dbName.4=1024Mb, dbName.5=2048Mb
 - после dbName.5=2048Mb mongoDB создает файлы одного размера
 - файлы создаются заранее (и занимают место)

//config сервер (mongoc)
 - не обрабатывает клиентские запросы
 - является хранилищем метаданных
 - знает физические адреса всех chunk-ов (какой chunk, на каком шарде искать и какой него диапазон)
 - все данные хранит в config database

//mongos
 - кэширование данных, хранимых на config сервере
 - роутинг запросов чтения и записи от драйвера
 - маршрутизация запросов от приложений на нужные шарды
 - знает где физически находится тот или иной чанк
 - Запуск фонового процесса “балансер”

//балансер
 - миграции чанков из одного шарда на другой:
     - балансер отсылает команду moveChunk на шард, из которого будет мигрировать chunk,
     - шард, получая команду, запускает процесс копирования чанка на другой шард
     - когда документы скопированы, происходит синхронизация документов между этими 2-мя чанками (в исходный чанк могли добавиться новые данные)
     - после синхронизации шард, который принял новый чанк, отправляет его адрес config серверу
     - config серверу обновляет его в кэше mongos'а
     - если на исходном чанке нет открытых курсоров, он удаляется

//mongoc


