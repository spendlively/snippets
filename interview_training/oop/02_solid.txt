
/////////
//SOLID//
/////////
//Принцип единственной ответственности
 - класс должен иметь одну ответственность

//Принцип открытости-закрытости
 - Для этого нужно программировать на уровне интерфейсов а не реализации

//Принцип подстановки Барбары Лисков
 - Поведение наследуемого класса не должно противоречить поведение базового класса
 - Метод в наследуемом классе должен либо усиливать, либо повторять метод базового класса
 - Метод в родительском классе должен либо ослаблять, либо повторять метод дочернего класса
 - Код не должен поломаться если вместо дочернего класса использовать родительский

//Принцип разделения интерфейса
 - Много специализированных интерфейсов лучше, чем один универсальный

//Принцип инверсии зависимостей
 - Зависимости внутри системы строятся на основе абстракций, а не деталей.
 - Модули верхнего уровня не зависят от модулей нижнего уровня.
 - Абстракции не должны зависеть от деталей.
-  Детали должны зависеть от абстракций.


/////////////////////////
//Инверсии зависимостей//
/////////////////////////
//IoC
 - это общий термин, не вы вызываете библиотечный код, а библиотечный код вызывает вас

//DI
 - один из способов реализации инверсии управления
 - в контейнере описываются зависимости, внешний код их инжектит
