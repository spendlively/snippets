
Уровни тестирования

1. Приемо-сдаточное
 - определяют принимает заказчик работу или нет
 - ручное + селениум
 - в осное лежит чеклист по которому проверятся руками

2. Системное
 - проверка функциональных и нефункциональных требований к системе в целом
 - неверное использование ресурсов
 - несовместимость с окружением
 - неудобное использование
 - на осное use-кейсов
 - например проверить потечет ли память

3. Интеграционное
 - проверка связи м/у модулями и взаимодействия м/у частями системы
 - 1 подход - снизу-вверх
 - 2 подход - сверху-вниз
 - 3 подход - большой взрыв

2 и 3 - могут и должны стучаться к бд

4. Модульное
 - проверка минимального юнита оторванного от реальности
 - нет обращения к инфраструктуре проекта
 - нет потоков
 - нет файловой системы
 - нет бд
 - сложные зависимости и инфраструктура мокаются
 - позволяет производить рефакторинг

5. Нагрузочное
 - проверка высокой доступности





Когда пишутся юнит-тесты
 - Тесты не пишутся на новый функционал
 - Тесты пишутся в конце
 - Код + Тесты = Х + 30% времени
 - При написании кода нужно учитывать что будут тесты





Что мешает писать тестируемый код
1. Добыча заний
 - метод получает объект и начинает в нем ковыряться больше чем через 1 стрелку
 - нужно передавать конкретный параметр
 - аналогия - кассиру нужно давать класс деньги а не класс кошелек

2. Оператор new в бизнесс коде
 - Класс House и класс Kitchen
 - Kitchen должна инжектиться в House
 - House должен создаваться например из фабрики
 - new выносится к связующую часть системы ("клей")
 - фабрики не тестируют
 - new можно использовать для создания примитива (Например SQL структуры, DTO, Exceptions, ...)

3. Синглтоны и статические вызовы
 - вносит жесткую связанность
 - синглтон можно использовать только для неизменяемых immutable объектов или если
 - синглтон можно использовать если объект не используется в приложении: логгер или гугл аналитика

4. Матерый конструктор
 - конструктор должен отвечать только за инициализацию полей класса





DI
 - Di должен реализовывать паттерн "Triple R" (Register, Resolve, Release)
 - Di не должен превращаться в антипаттерн service Locator





Борьба с зависимостями
 - чтобы протестировать объект методу передаются объекты подделки
 - самый простой способ переопределить класс в наследнике
 - нужно отказываться от private и переходить на protected
 - в качестве зависемостей передаются подделки





Виды подделки
1. Stub
 - используются для тестирования состояния
 - моделирует окружение и больше ничего
 - простой слуга который имитирует заданное состояние

2. Mock
 - используются для тестирования поведения
 - подсовывается чтобы проверить что тестируемый объект выполнил требуемые действия
 - например метод мок-класса был вызван указанное колличество раз с указанным параметром





Тестовый случай или как писать тесты
 - каждый тестовый случай (test case) должен проверять только оду вещь
 - состоит из Action, Expected Result и Test result

Пример:
 - Action - открыть страницу аутентификации
 - Expected Result - страница аутентификации открылась
 - Test result - passed

Результат ожидания
 - позитивный тест кейс - проверяет корректными данными
 - негативный тест кейс - проверяет что некорректные данные вызывают ошибку/эксепшн/срабатывание валидатора

Структура текстовых слачаев (AAA)
 - arrange - организация
 - act - действие
 - assert - утверждение





Конвенции именования тестовых методов
//Способ 1 (предпочтительный)
Should_ExpectedBehavior_When_StateUnderTest
 - Should_ThrowException_When_AgeLessThan18
 - Should_FailToWithdrawMoney_ForInvalidAccount
 - Should_FailToAdmin_IfMandatoryFieldsAreMissing

//Способ 2
1. MethodName_StateUnderTest_ExpectedBehavior
 - isAdult_AgeLessThen18_False
 - withdrawMoney_InvalidAccount_ExceptionThrown
 - adminStudent_MissingMandatoryFields_FailToAdmin

2. MethodName_ExpectedBehavior_StateUnderTest
 - isAdult_False_AgeLessThan18
 - withdrawMoney_ThrowsException_ifAccountIsInvalid
 - adminStudent_FailToAdmin_ifMandatoryFieldsAreMissing

Если при рефакторинге имя теста поменяется придется править тест

//Способ 3
test[Feature being tested]
 - testIsNotAnAdultIfAgeLessThan18

//Способ 4
When_StateUnderTest_Expect_ExpectedBehavior
 - Ahen_AgeLessThan18_Expect_isAdultAsFalse





После каждой строчки кода спроси себя
 - что здесь может пойти не так
 - как я смогу это протестировать

Свойства хорошего теста A-TRIP
(SOLID в мире тестирования)
 - Automatic - должны запускаться автоматом и проверять результат автоматом
 - Through (целостность) - тестируйте все что может сломаться
 - Repeatable - тесты не должны запускаться в любой последовательности, не зависеть от чего-либо и давать одинаковый результат
 - Independent - тесты должны быть независимы друг от друга, окружения и порядка запуска
 - Professional - тесты должны быть написаны качественно как и код с применением тех же принципов





Антипаттерны тестов
 - Инспектор - нарушает инкапсулюцию при попытке покрытия 100% и знает слишком много (часто ломается)
 - Местный герой - зависит от окружения (не выполняется у другого разработчика)
 - Крохобор - проверяет весь результат когда нужно проверить незначительную часть
 - Уклонист - тестирует мелочи и не тестирует самое главное
 - Скрытая зависимость - требует перед запуском заполнить какие-то данные
 - Чужак - тестирует совершенно другой объект
