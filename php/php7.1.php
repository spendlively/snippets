<?php

///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
/////////////////////////////PHP 7.1///////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////
/////////////////////////Обнуляемые типы///////////////////////////////
///////////////////////////////////////////////////////////////////////
// возвращаемые значения, могут быть как указанного типа, так и NULL
function testReturn(): ?string
{
    return 'elePHPant';
}





///////////////////////////////////////////////////////////////////////
/////////////////Ничего не возвращающие функции////////////////////////
///////////////////////////////////////////////////////////////////////
// Функции с таким заданным типом не должны ничего возвращать
// либо вообще не содержать ни одного оператора return
// либо использовать его без параметра
// NULL не является корректным значением для возврата в таких функциях
function swap($left, $right): void
{
    if ($left === $right) {
        return;
    }
}
var_dump(swap($a, $b));





///////////////////////////////////////////////////////////////////////
///////////////Симметричная деструктуризация массива///////////////////
///////////////////////////////////////////////////////////////////////
$data = [
    [1, 'Tom'],
    [2, 'Fred'],
];

// list() style
list($id1, $name1) = $data[0];

// [] style
[$id1, $name1] = $data[0];

// list() style
foreach ($data as list($id, $name)) {
    // logic here with $id and $name
}

// [] style
foreach ($data as [$id, $name]) {
    // logic here with $id and $name
}





///////////////////////////////////////////////////////////////////////
/////////////////////Видимость констант класса/////////////////////////
///////////////////////////////////////////////////////////////////////
class ConstDemo
{
    const PUBLIC_CONST_A = 1;
    public const PUBLIC_CONST_B = 2;
    protected const PROTECTED_CONST = 3;
    private const PRIVATE_CONST = 4;
}





///////////////////////////////////////////////////////////////////////
/////////////////////////Псевдо-тип iterable///////////////////////////
///////////////////////////////////////////////////////////////////////
// может использоваться как параметр, так и в качестве возвращаемого значения там,
// где используется массив или объект реализующий интерфейс Traversable
function iterator(iterable $iter)
{
    foreach ($iter as $val) {
        //
    }
}





///////////////////////////////////////////////////////////////////////
////////Обработка нескольких исключений в одном блоке catch////////////
///////////////////////////////////////////////////////////////////////
try {
    // Какой то код
} catch (FirstException | SecondException $e) {
    // Обрабатываем оба исключения
}






///////////////////////////////////////////////////////////////////////
//////////////////////Поддержка ключей в list()////////////////////////
///////////////////////////////////////////////////////////////////////
$data = [
    ["id" => 1, "name" => 'Tom'],
    ["id" => 2, "name" => 'Fred'],
];

// стиль list()
list("id" => $id1, "name" => $name1) = $data[0];

// стиль []
["id" => $id1, "name" => $name1] = $data[0];

// стиль list()
foreach ($data as list("id" => $id, "name" => $name)) {
    // logic here with $id and $name
}

// стиль []
foreach ($data as ["id" => $id, "name" => $name]) {
    // logic here with $id and $name
}





///////////////////////////////////////////////////////////////////////
/////////////Поддержка отрицательных смещений для строк////////////////
///////////////////////////////////////////////////////////////////////
var_dump("abcdef"[-2]);
var_dump(strpos("aabbcc", "b", -3));






///////////////////////////////////////////////////////////////////////
//Преобразование callable в Closure с помощью Closure::fromCallable()//
///////////////////////////////////////////////////////////////////////
class Test
{
    public function exposeFunction()
    {
        return Closure::fromCallable([$this, 'privateFunction']);
    }

    private function privateFunction($param)
    {
        var_dump($param);
    }
}

$privFunc = (new Test)->exposeFunction();
$privFunc('some value');
