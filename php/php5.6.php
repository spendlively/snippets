<?php

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
/////////////////////////////PHP 5.6//////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////
//////////////////Константные выражения///////////////////
//////////////////////////////////////////////////////////
const ONE = 1;
const TWO = ONE * 2;

class C {
    const THREE = TWO + 1;
    const ONE_THIRD = ONE / self::THREE;
    const SENTENCE = 'The value of THREE is '.self::THREE;

    public function f($a = ONE + self::THREE) {
        return $a;
    }
}

echo (new C)->f()."\n";
echo C::SENTENCE;





//////////////////////////////////////////////////////////
////////Функции с переменным количеством аргументов///////
//////////////////////////////////////////////////////////
function f($req, $opt = null, ...$params) {
    //...
}

f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);





//////////////////////////////////////////////////////////
/////////Развертывание аргументов с помощью ...///////////
//////////////////////////////////////////////////////////
function add($a, $b, $c) {
    return $a + $b + $c;
}

$operators = [2, 3];
echo add(1, ...$operators);






//////////////////////////////////////////////////////////
///////////Возведение в степень с помощью **//////////////
//////////////////////////////////////////////////////////
var_dump(2 ** 3);





//////////////////////////////////////////////////////////
//////////////use function и use const////////////////////
//////////////////////////////////////////////////////////
//namespace Name\Space {
//    const FOO = 42;
//    function f() { echo __FUNCTION__."\n"; }
//}
//
//namespace {
//    use const Name\Space\FOO;
//    use function Name\Space\f;
//
//    echo FOO."\n";
//    f();
//}





//////////////////////////////////////////////////////////
////////////////////////phpdbg////////////////////////////
//////////////////////////////////////////////////////////
//https://phpdbg.room11.org/introduction.html





//////////////////////////////////////////////////////////
////////////////Кодировка по умолчанию////////////////////
//////////////////////////////////////////////////////////
//Добавлен ini-параметр default_charset,
// в котором можно указать кодировку по умолчанию
// для использования в функциях htmlentities(), html_entity_decode() и htmlspecialchars()





//////////////////////////////////////////////////////////
//////////////Переиспользование php://input  /////////////
//////////////////////////////////////////////////////////
// php://input теперь можно переоткрытьи читать столько раз, сколько нужно





//////////////////////////////////////////////////////////
/////////////////////__debugInfo()////////////////////////
//////////////////////////////////////////////////////////
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));

