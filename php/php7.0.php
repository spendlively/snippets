<?php

//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////
/////////////////////////////PHP 7.0//////////////////////////////
//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////

//http://php.net/manual/ru/migration70.other-changes.php

/////////////////////////////////////////////////////
////Оператор spaceship <=> (космический корабль)/////
/////////////////////////////////////////////////////
var_dump(1 <=> 1); // = 0
var_dump(1 <=> 0); // > 1
var_dump(0 <=> 1); // < -1

//Пример:
$numbers = [9,8,7,6,5,4,3,2,1];
usort($numbers, function($n1, $n2){
    return  $n1 <=> $n2;
});
var_dump($numbers);





/////////////////////////////////////////////////////
///////////Оператор объединения с null //////////////
/////////////////////////////////////////////////////
$username = $_GET['user'] ?? 'nobody';
$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
//Вместо isset
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';





/////////////////////////////////////////////////////
///////////////Поддержка Unicode/////////////////////
/////////////////////////////////////////////////////
//Символы Unicode испрользуются как база для UTF
//https://unicode-table.com/ru/
echo "\u{262F}" . "<br>"; //php подставит





/////////////////////////////////////////////////////
////////Функция целочисленного деления intdiv()//////
/////////////////////////////////////////////////////
var_dump(intdiv(10, 3));





/////////////////////////////////////////////////////
//////////////Функции для генерации//////////////////
///////////КРИПТОГРАФИЧЕСКИ БЕЗОПАСНЫХ///////////////
///////////////строк и целых чисел///////////////////
/////////////////////////////////////////////////////
var_dump(random_bytes(10));
var_dump(random_int(1, 10));





/////////////////////////////////////////////////////
/////////preg_replace_callback_array()///////////////
/////////////////////////////////////////////////////
//Позволяет заменить целый массив значений
$subject = 'Aaaaaa Bbb';
preg_replace_callback_array(
    [
        '/[a]+/i' => function ($match) {
            var_dump($match);
        },
        '/[b]+/i' => function ($match) {
            var_dump($match);
        }
    ],
    $subject
);


////////////////////////////////////////////////
///////////Декларация скалярных типов///////////
////////////////////////////////////////////////
//http://php.net/manual/ru/functions.arguments.php#functions.arguments.type-declaration

//Поддерживаются:
// - string,
// - int,
// - float,
// - bool (boolean - вызовет ошибку)

//начиная с PHP 5.6
// - Имя класса/интерфейса
// - self - instanceof того же класса, в методе которого он указан
// - array
// - callable
// - iterable

//Дотупно 2 режима:
// 1. Принуждающий (по умолчанию)
// 2. Строгий
//     - только для конкретного файла
//     - в начале файла должно идти declare(strict_types=1);
//     - если передать другой тип, будет Fatal error: Uncaught TypeError

function sumOfInts(int ...$ints)
{
    return array_sum($ints);
}
var_dump(sumOfInts(2, '3', 4.1)); //int(9) - строки преобразуются в int



/////////////////////////////////////////////////////
////Списки аргументов переменной длины (PHP 5.6)/////
/////////////////////////////////////////////////////
function sum(...$numbers) {
    $acc = 0;
    foreach ($numbers as $n) {
        $acc += $n;
    }
    return $acc;
}
echo sum(1, 2, 3, 4); //10



//передача аргументов из массива
function add($a, $b) {
    return $a + $b;
}
echo add(...[1, 2])."\n";



//с подсказкой типов
function total_intervals($unit, DateInterval ...$intervals) {
//...
}






/////////////////////////////////////////////////////////////
/////////////Декларация возвращаемых значений////////////////
/////////////////////////////////////////////////////////////
//http://php.net/manual/ru/functions.returning-values.php#functions.returning-values.type-declaration
function sum($a, $b): float
{
    return $a + $b;
}






/////////////////////////////////////////////////////////////
/////////////Константы массивы с помощью define()////////////
/////////////////////////////////////////////////////////////
define('ANIMALS', ['dog', 'cat', 'bird']);





/////////////////////////////////////////////////////////////
////////////////////Анонимные классы/////////////////////////
/////////////////////////////////////////////////////////////
//http://php.net/manual/ru/language.oop5.anonymous.php
interface Logger {}

class Application {
    public function setLogger(Logger $logger) {
        $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});





/////////////////////////////////////////////////////////////
////////////////////Closure::call()//////////////////////////
/////////////////////////////////////////////////////////////
class A {private $x = 1;}

// До PHP 7
$getX = function() {return $this->x;};
$getXCB = $getX->bindTo(new A, 'A'); // промежуточное замыкание
echo $getXCB();

// PHP 7+
$getX = function() {return $this->x;};
echo $getX->call(new A);





/////////////////////////////////////////////////////////////
////////////////unserialize() с фильтрацией//////////////////
/////////////////////////////////////////////////////////////
$foo = "asd;asjopd";
$data = unserialize($foo, ["allowed_classes" => false]);






/////////////////////////////////////////////////////////////
//////////////////////////Ожидания///////////////////////////
/////////////////////////////////////////////////////////////
ini_set('assert.exception', 1);
class CustomError extends AssertionError {}
assert(false, new CustomError('Some error message'));





/////////////////////////////////////////////////////////////
////////////////Групповые декларации use/////////////////////
/////////////////////////////////////////////////////////////
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};





/////////////////////////////////////////////////////////////
///////////////////////Опции сессий//////////////////////////
/////////////////////////////////////////////////////////////
session_start([
    'cache_limiter' => 'private',
    'read_and_close' => true,
]);
