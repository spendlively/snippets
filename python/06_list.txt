
# Списки могут хранить элементы разных типов
[1, True, 'string', [1,2,3]]

# длина списка
len([]) # 0

# сцепление списков
[1, 2] + [3, 4] # [1,2,3,4]
# l1 = l1 + l2

# дублирование списка
[1] * 3 # [1,2,3]

# проверка вхождения
3 in [1, 2, 3, 4, 5] # True

# аггрегаторы (все элементы должны быть числовыми)
max([1,2,3])
min([1,2,3])
sum([1,2,3])
sorted([3,2,1])
sorted([1,2,3], reverse=True)

# сравнение
[100, 1] > [90,200,300] # True

# индексы
[0,1,2,3][0] # 0
[0,1,2,3][-1] # 3

# срезы (по аналогии со строками)
[0,1,2,3][1:3] # [1,2]

# в списке можно изменить значение по индексу (в отличае от строки)
l1 = [0,1,2]
l1[2] = 5 # [0,1,5]

# групповая замена по индексу
l2 = [0,1,2,3,4,5,6,7,8,9]
l2[4:] = 44,55 # [0,1,2,3,44,55]

# удаление по индексу
del l2[0] # [1,2,3,44,55]

# списки копируются по ссылке
a = [1,2,3]
b = a
b[0] = 11
a # [11,2,3]

# клонирование объекта
a = [1,2,3]
b = a[:]
b[0] = 11
a # [1,2,3]

# методы (как правило ничего не возвращают)
[1,2,3].append(4) # [1,2,3,4]
[1,2,3].clear() # []
[1,2,3].copy() # [1,2,3] клонирует по аналогии с a[:]
[1,2,2,3,3,3,4,4,4,4].count(3) # 3 - подсчет вхождений
[0,1,2,3,4,5].index(3) # 3
[1,2,3,4].insert(0, 0) # [0,1,2,3,4] - вставляет по индексу, сдвигая вправо
[1,2,3].pop() # удаляет элемент с конца и возвращает его
[0,1,2].pop(2) # удалить элемент с индексом 2
[0,1,2,3,4,5].remove(2) # удаляет элемент со значением 2 (только одно)
[5,4,3,2,1].reverse() # [1,2,3,4,5]
[5,4,3,2,1].sort() # [1,2,3,4,5]
[1,2,3,4,5].sort(reverse=True) # [5,4,3,2,1]

# list to string
"".join([1, 2, 3])

# индексация
a = [0, 1, 2, 3, 4, 5, 6, 7]
a[start_ind_включительно : end_ind_невключительно : step]
a[1:5:2] # [1, 5) с шагом 2 =  [1, 3]
