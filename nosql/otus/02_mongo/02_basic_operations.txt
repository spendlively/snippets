
////////////////////
//Version and info//
////////////////////
mongod --version
show dbs
use db1
show collections
db.printCollectionStats()
db.collection.getShardDistribution()
db.tickets.stats()

//shard info
rs.status()
db.isMaster()
sh.balancerCollectionStatus("bank.tickets")
sh.splitFind( "bank.tickets", { "amount": "50" } )
db.printShardingStatus()

//admin db
use admin
db.auth("admin", "pass");
show dbs
show users;
db.getRoles();
sh.status()
db.getReplicationInfo()
use config
db.databases.find()
db.databases.find( { "partitioned": true } )

//files
/etc/mongod.conf
dbpath=/data/mongod
//The directory where the mongod instance stores its data
logpath=/var/log/mongo/mongod.log

//////////////////
//CRUD for users//
//////////////////
//1. Read
use admin
db.system.users.find()

//2. Get current username
db.runCommand({connectionStatus : 1})

//3. Create admin
use admin
db.createUser({
    user: "root",
    pwd: "passme",
    roles: [
        "userAdminAnyDatabase",
        "dbAdminAnyDatabase",
        "readWriteAnyDatabase",
        {
            role: "readWrite",
            db: "hw"
        }
    ],
    passwordDigestor: "server"
})

//3.2 Create db read/write user
use hw02
db.createUser({
    user: "user",
    pwd: "passme",
    roles: [
        {role: "readWrite", db: "hw02"},
        {role: "dbAdmin", db: "hw02"},
    ],
    passwordDigestor: "server"
})

/////////////////////////////////
//Connection and authentication//
/////////////////////////////////
//Connection
mongo
mongo --username user --password --authenticationDatabase hw02 --host localhost --port 27017

//relogin after login
use admin //first specify db
db.auth("root", "passme")

//get current username
db.runCommand({connectionStatus : 1})


/////////////////////
//CRUD for database//
/////////////////////
//1. Read dbs
show dbs
//1.2 Get current db
db

//Delete db
db.dropDatabase()

////////////////////////
//CRUD for collections//
////////////////////////
//1. Read
show collections

//Delete collection
db.customers.drop()

//////////////////////
//CRUD for documents//
//////////////////////
//1. Insert
use hw02
db.customers.insertOne({"customer_id": "0201", "genre": "Male", "age": 31, "annual_income": 132, "spending_score": 85});
db.customers.insertMany([
    {"customer_id": "0202", "genre": "Male", "age": 32, "annual_income": 133, "spending_score": 86},
    {"customer_id": "0203", "genre": "Male", "age": 33, "annual_income": 134, "spending_score": 87},
]);

//2. Select
use hw02
db.customers.find({});
db.customers.find({"customer_id": "0201"});
//formatted output
db.customers.find().pretty()

//2.1 Get count
db.customers.count()
db.customers.count({"genre": "Female"})

//2.2 Distinct
db.customers.distinct("genre")

//2.3 Group by genre
db.customers.aggregate([{"$group" : {_id:"$genre", count:{$sum:1}}}])

//3. Update
use hw02
db.customers.updateOne({"customer_id": "0201"}, {$set: {"genre": "Female"}})
db.customers.updateMany({"customer_id": "0202"}, {$set: {"genre": "Female"}})

//4. Delete
use hw02
db.customers.deleteMany({customer_id : "0202"})

////////////////////
//CRUD for indexes//
////////////////////
db.customers.createIndex({"customer_id": "text"})
db.customers.explain().find({"customer_id": "0200"})

/////////////////
//Sharding CRUD//
/////////////////
rs.status() //информация о ноде
db.isMaster() //мастер нода или нет?
rs.add("mongo:27004") // добавить как простую ноду
rs.addArb("localhost:27004") //добавить как арбитр
rs.remove("localhost:27002") //удалить ноду
rs.remove("127.0.0.1:27002") //удалить ноду
rs.slaveOk() //разрешить чтение со слейва
rs.secondaryOk() //разрешить чтение со слейва
rs.initiate() //инициализация шарда
sh.addShard() //добавить шард в балансир mongos
sh.enableSharding("dbname") //включить шардирование
db.settings.save({ _id:"chunksize", value: 1}) //размер чанка (use config) чтобы данные хоть как-то разъехались
sh.shardCollection("dbname.collectionname",{amount: 1}) //включить шардирование коллекции, ключ шард. amount (должен быть индекс)
db.shutdownServer() //выключить сервер (use admin)

/////////////////////
//Import and backup//
/////////////////////

