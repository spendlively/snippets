
////////////////////////////////////////////////
///////////////Debug инструменты////////////////
////////////////////////////////////////////////
gdb для отладки ядра
gdb /boot/rmlinux /proc/kcore

kdb

kgdb
 - отладка ядра на самых ранних стадиях

crash
 - современный и развитый отладчик ядра и систем виртуализации



////////////////////////////////////////////////
////////////////////Debugfs/////////////////////
////////////////////////////////////////////////
#include <linux/fs.h>
#include <linux/debugfs.h>

//Функция создания каталога - debugfs_create_dir
//name - имя каталога который хотим увидеть в отладочной системе
//parent - ссылка на родителя (null если работаем с корнем)
struct dentry *debugfs_create_dir(
    const char *name,
    struct dentry *parent
);

//Функция создания файла - debugfs_create_file
// - имя файла
// - режим доступа к файлу
// - ссылка на каталог в котором создаем файл
// - ассоциированные данные
// - структура проинициализированная указателями на файловые функции,
//кот делают нужную нам работу
struct dentry *debugfs_create_file(
    const char *name,
    mode_t mode,
    struct dentry *parent,
    void *data,
    struct file_operations *fops
);

//Функция для удаления объектов внутри debugfs
void debugfs_remove(struct dentry *d);



////////////////////////////////////////////////
/////////////////kprobes (jprobes)//////////////
////////////////////////////////////////////////
 - мощный интерфейс для отладки различных ситуаций в ядре
 - позволяет устанавливать несколько типов обработчиков отладочных ситуаций

Обработчики ситуаций:
 - pre_handler - перед выполнением соответствующей инструкции
 - post_handler - после выполнением соответствующей инструкции
 - fault_handler - при возникновении исключительной ситуации
 - brake_handler - при пошаговом дебаге

Программный интерфейс:
#include <linux/kprobes.h>

//Регистрация обработчиков
int register_kprobe(struct kprobe *kp);
int unregister_kprobe(struct kprobe *kp);

//Для понимания можно посмотреть код структуры linux/kprobes.h

