//Устройства
 - символьные
 - блочные
 - сетевый

//Основные системные вызовы для любых драйверов одинакомы
 - open
 - read
 - write
 - close

//Работа с устройствоами из пользовательских приложений
 - для каждого устройства ядро создает файлустройства /dev/tty*
 - каждому устройству в /dev/tty* соответствует структура struct device
 - пользовательская функция fwrite/fread транслируется в соотв системный вызов write/read
 - ядро обрабатывает вызовы write/read использую механизм прерываний

//Пример
1. printf(...) транслируется в fprintf()

2. fprintf(stdout, ...) транслируется в системный вызов write()

3. write()

4. реальный системный вызов
mov $4,%eax //4 - номер системного вызова write
...
делается программное прерывание int 80 (80 - 16-чное число)

------------Пространство пользователя--------------
---------------------------------------------------
----------------Пространство ядра------------------

5. в ядре обработчик прерываний syscall dispatcher
анализирует регистр %eax и вызывает соответствующую процедуру
внутри ядра

6. write
