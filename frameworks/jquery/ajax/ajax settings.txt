//accepts:map(зависит от DataType)
При выполнении запроса, в заголовках (header) указываются допустимые типы содержимого,
ожидаемого от сервера. Значения этих типов будут взяты из параметра accepts.



//async:boolean(true)
По умолчанию, все запросы без перезагрузки страницы происходят асинхронно
(то есть после отправки запроса на сервер, страница не останавливает свою работу в ожидании ответа).
Если вам понадобиться синхронное выполнение запроса, то установите параметр в false.
Кроссдоменные запросы и запросы типа "jsonp" не могут выполняться в синхронном режиме.
Имейте ввиду, что выполнение запросов в синхронном режиме может привести к блокировке страницы,
пока запрос не будет полностью выполнен.



//beforeSend(jqXHR, settings):function
Это поле содержит функцию, которая будет вызвана непосредственно перед отправкой ajax-запроса на сервер.
Такая функция может быть полезна для модификации jqXHR-объекта (в ранних версиях библиотеки (до 1.5),
вместо jqXHR используется XMLHttpRequest).
Например, можно изменить/указать нужные заголовки (headers) и.т.д.
Объект-jqXHR будет передан в функцию первым аргументом.
Вторым аргументом передаются настройки запроса.
beforeSend относится к ajax-событиям.
Поэтому если указанная в нем функция вернет false, ajax-запрос будет отменен.

Начиная с jQuery-1.5, beforeSend вызывается независимо от типа запроса.



//cache:boolean(true. Для 'script' и 'jsonp' — false)
В случае значения false браузер не будет кешировать производимый запрос.
Кроме этого, это приведет к добавлению строки "_=[TIMESTAMP]" в URL.



//complete(jqXHR, textStatus):function, array
функция, которая будет вызвана после завершения ajax-запроса
(вызывается позднее функций-обработчиков успешного (success) или аварийного (error) завершения запроса).
В функцию передаются два параметра: jqXHR (в ранних версиях библиотеки (до 1.5),
вместо jqXHR используется XMLHttpRequest) и статус выполнения запроса
(строковое значение:"success", "notmodified", "error", "timeout", "abort", или "parsererror").
Начиная с jQuery-1.5, в параметр complete можно передать не одну функцию, а массив функций.
Все функции будут вызваны в той очередности, в которой заданы в этом массиве.



//contents:map
(Эта настройка появилась в jQuery-1.5) Параметр задается объектом в формате {строка:регулярное выражение}
и определяет, как jQuery будет разбирать (парсить) ответ от сервера, в зависимости от его типа.



//contentType:string('application/x-www-form-urlencoded')
При отправлении запроса на сервер, данные передаются в формате, указанном в contentType.
По умолчанию используется 'application/x-www-form-urlencoded', который подходит в большинстве случаев.
Если указать этот параметр явно, то он будет передан серверу (даже если туда не были отправлены никакие данные).
Стоит отметить, что данные всегда будут передаваться в кодировке UTF-8.
Это стоит учитывать при обработке данных на стороне сервера.



//context:object
Позволяет указать контекст (в смысле передаваемого в переменную this значения) для всех обработчиков,
связанных с выполнением текущего запроса. По умолчанию, в context храниться объект с настройками текущего ajax-запроса.
В качестве контекста можно задать DOM-элемент, который должен каким-либо образом сигнализировать о завершении запроса:

$.ajax({ url: "test.html", context: document.body, success: function(){
  // в данном случае this будет равен document.body
  $(this).addClass("done");
}});



//converters:map({"* text":window.String, "text html":true, "text json":jQuery.parseJSON, "text xml":jQuery.parseXML})
(Эта настройка появилась в jQuery-1.5) Данный параметр определяет, с помощью каких функций
будет производиться конвертация значений из одного типа, в другой.
Представлен объектом в формате {строка:функция}, где строка содержит названия двух типов через пробел
("конвертировать_из конвертировать_в").



//crossDomain:boolean(false при запросах на тот же домен, true в случае запросах в чужую доменную зону)
(Эта настройка появилась в jQuery-1.5) Если вы хотите сделать кроссдоменный запрос в ту же доменную зону
(например jsonp-запрос), установите этот параметр в true.
Это позволит, к примеру, сделать перенаправление запроса на другой домен с вашего сервера.



//data:object,string
Данные, которые будут отправлены на сервер. Если они заданы не строчным значением,
то будут предварительно преобразован в строку.
Избежать этого преобразования можно изменив параметр processData (его описание можно найти ниже).
В случае запроса методом GET, строка с данными добавляется в конец url.
Если данные задаются с помощью объекта, то он должен соответствовать формату: {fName1:value1, fName2:value2, ...}.




//dataFilter(data, type):function
Функция, которая будет осуществлять предварительную обработку данных,присланных сервером.
В функцию эту передаются два параметра: упомянутые данные и значение параметра dataType.
Указанная в dataFilter функция, должна возвращать обработанные данные.



//dataType:string(определяется автоматически (xml, json, script, или html))
Тип данных, в котором ожидается получить ответ от сервера.
Если он не задан, jQuery попытается определить его автоматически с помощью полученного от сервера MIME.
Ниже можно найти подробности использования этого параметра.



//error(jqXHR, textStatus, errorThrown):function,array
Функция, которая будет вызвана в случае неудачного завершения запроса к серверу.
Ей предоставляются три параметра: jqXHR (в более ранних версиях библиотеки (до 1.5),
вместо jqXHR используется XMLHttpRequest), строка с описанием произошедшей ошибки,
а так же объект исключения, если такое произошло. Возможные значения второго аргумента:
"timeout", "error", "notmodified" и "parsererror" (в непредвиденных случаях, может быть возвращено значение null).
Начиная с jQuery-1.5, этот параметр может принимать как одну функцию, так и массив функций.
Событие error не определено для dataType равных script и JSONP.

error относится к ajax-событиям.



//global:boolean(true)
Отвечает за работу глобальных событий ajax-запроса (подробнее в соответствующем разделе).
Если задать этому параметру значение false, глобальные события для данного запроса вызываться не будут.



//headers:map({})
(Эта настройка появилась в jQuery-1.5) В этом поле можно указать дополнительные заголовки запроса (header).
Эти изменения будут введены до вызова beforeSend, в которой могут быть произведены окончательные правки заголовков.



//ifModified:boolean(false)
При переводе этой настройки в true, запрос будет выполнен со статусом "успешно", лишь в случае,
если ответ от сервера отличается от предыдущего ответом.
jQuery проверяет этот факт обращаясь к заголовку Last-Modified. Начиная с jQuery-1.4,
кроме Last-Modified проверяется и 'etag' (оба они предоставляются сервером и необходимы
для оповещения браузера о том, что запрашиваемые данные с сервера не изменены с предыдущего запроса).



//isLocal:boolean(в зависимости от текущего протокола)
(Эта настройка появилась в jQuery-1.5.1) Позволяет установить статус источника страницы локальным
(как если бы это происходило по протоколу file), даже если jQuery распознал его иначе.
Библиотека решает, что страница запущена локально в случае следующих протоколов: file, *-extension, и widget.
Рекомендуется устанавливать значение параметраisLocal глобально — с помощью функциии $.ajaxSetup(),
а не в настройках отдельных ajax-запросов.



//jsonp:string,false
Определяет имя параметра, который добавляется в url при jsonp-запросе
(по умолчанию, используется "callback" — "httр://siteName.ru?callback=...").
Начиная с jQuery-1.5, указав в этом параметре false, вы предотвратите добавление в url дополнительного параметра.
В этом случае необходимо явно установить значение свойства jsonpCallback.
Например так: {jsonp:false, jsonpCallback:"callbackName"}.



//jsonpCallback:string,function
Определяет имя функции, которая будет вызвана при ответе сервера на jsonp-запрос.
По умолчанию, jQuery генерирует произвольное название этой функции, что является более предпочтительным вариантом,
упрощающим работу библиотеки. Один из причин, при котором стоит указывать собственную функцию обработки jsonp-запроса,
является улучшение кеширования GET-запросов.
Начиная с jQuery-1.5, вы можете указать функцию в этом параметре, для того, чтобы обработать ответ сервера самостоятельно.
В этом случае,указанная функция должна возвращать полученные от сервера данные
(в указанной функции они будут доступны в первом параметре).



//mimeType:string
(Эта настройка появилась в jQuery-1.5.1) В этом поле можно указать тип данных (в mime-формате),
в котором ожидается ответ с сервера.
Это приведет к замене аналогичного поля в объекте XMLHttpRequest.



//password:string
Пароль для аутентификации на сервере, если это требуется.



//processData:boolean(true)
По умолчанию, все передаваемые на сервер данные, предварительно преобразуются в строку
(url-формата: fName1=value1&fName2=value2&...) соответствующую "application/x-www-form-urlencoded".
Если вам необходимо отправить данные, которые нельзя подвергать подобной обработке (например документ-DOM),
то следует отключить опцию processData.



//scriptCharset:string
Этот параметр используется для кроссдоменных ajax-запросов типа GET, dataType при этом может быть или "jsonp",или "script".
Определяет кодировку, в которой будет выполнен кроссдоменный запрос.
Это необходимо, в случае, если сервер на чужом домене использует кодировку, отличную от кодировке на сервере родного домена.



//statusCode:map({})
(Эта настройка появилась в jQuery-1.5) набор пар, в котором кодам выполнения запроса сопоставляются функции,
которые при этом будет вызваны. Например, для кода 404 (страницы не существуют) можно сделать вывод сообщения на экран:
$.ajax({
  statusCode:{
    404:function(){
      alert('Страница не найдена');
    }
  }
});
Функции, реагирующие на коды удачного выполнения запроса будут получать те же аргументы,
что и функции-обработчики удачного выполнения запроса (указанные в параметре success),
а функции, срабатывающие на коды ошибок, будут такими же, как и у error-функций.



//success(data, textStatus, jqXHR):function,array
Функция, которая будет вызвана в случае удачного завершения запроса к серверу.
Ей будут переданы три параметра: данные, присланные сервером и уже прошедшие предварительную обработку
(которая отлична для разных dataType).
Второй параметр — строка со статусом выполнения.
Третий параметр содержит объект jqXHR (в более ранних версиях библиотеки (до 1.5),
вместо jqXHR используется XMLHttpRequest).
Начиная с jQuery-1.5, вместо одной функции, этот параметр может принимать массив функций.
success относится к ajax-событиям



//timeout:integer
Время ожидания ответа от сервера. Задается в в миллисекундах.
Если это время будет превышено, запрос будет завершен с ошибкой и произойдет событие error (см. описание выше),
которое будет иметь статус "timeout".
Время отсчитывается с момента вызова функции $.ajax.
Может случиться так, что в этот момент будет запущено несколько других запросов и браузер отложит выполнение текущего запроса.
В этом случае timeout может завершиться, хотя фактически, запрос даже еще не был запущен.

В jQuery-1.4 и младше, при завершении времени ожидания, объект XMLHttpRequest перейдет в состояние ошибки
и доступ к его полям может вызвать исключение.
В Firefox 3.0+ запросы типа script и JSONP не будут прерваны при превышении времени ожидания.
Они будут завершены даже после того как это время истечет.



//traditional:boolean(false)
Установите значение этого параметра в true, для того,
чтобы использовать традиционные параметры преобразования (сериализации).



//type:string("GET")
Определяет тип выполняемого запроса (GET или POST).
Можно использовать также типы PUT и DELETE, но нужно помнить, что их поддерживают не все браузеры.



//url:string(адрес текущей страницы)
Определяет адрес, на который будет отправлен запрос.
username:string
Имя пользователя для аутентификации на сервере, если это требуется.



//xhr:function(ActiveXObject в IE, XMLHttpRequest в других браузерах)
Функция, которая предоставит объект XMLHttpRequest.
По умолчанию, для браузеров IE этим объектом является ActiveXObject,
а в остальных случаях это XMLHttpRequest.
С помощью этого параметра вы можете внедрить собственную версию этого объекта.



//xhrFields:map
(Эта настройка появилась в jQuery-1.5.1)
Набор пар {имя:значене} для изменения/добавления значений соответствующих полей объекта XMLHttpRequest.
Например, можно установить его свойство withCredentials в true, при выполнении кроссдоменного запроса:
$.ajax({
   url: a_cross_domain_url,
   xhrFields: {
      withCredentials:true
   }
});
