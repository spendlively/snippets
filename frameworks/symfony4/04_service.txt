
//LINKS
//Сервис-контейнер
https://symfony.com.ua/doc/current/service_container.html

//Автомонтирование
https://symfony.com.ua/doc/current/service_container/autowiring-ru.html

//Введение в параметры
https://symfony.com.ua/doc/current/service_container/parameters.html




//config/services.yaml
autowire: true - позволяет создавать сервис,
просто описывая его в качестве зависисмости




//Просмотр сервисов, которые могут быть использованы
bin/console debug:container --types




//Указание аргументов для сервиса вручную
//config/services.yaml
parameters:
    admin_email: manager@example.com

services:
    AppBundle\Updates\SiteUpdateManager:
        arguments:
            # $adminEmail: 'manager@example.com'
            # на %parameter_name% можно сослаться в
            # любом другом файле конфигурации сервиса - типа config.yml
            # и php кода
            # $adminEmail = $this->container->getParameter('admin_email');
            # arguments: ['%mailer.transport%']
            $adminEmail: '%admin_email%'

//Использование
class SiteUpdateManager
{
    private $adminEmail;
    public function __construct(MessageGenerator $messageGenerator, \Swift_Mailer $mailer, $adminEmail)
    {
        $this->adminEmail = $adminEmail;
    }
}




//
services:
    _defaults:
        ...
        bind:
            $paramName: '%env(DISPATCHER_TYPE)%'




//autoconfigure: true
 - автоматически применять определенную конфигурацию к вашим сервисам,
основываясь на классе вашего сервиса
 - autoconfigure добавит тег (twig.extension) за вас




//public: false
 - не позволит получить доступ к сервису напрямую из контейнера




//Объявление 2 разных сревисов на основе 1го класса
//например для того, чтобы задать им разные параметры
services:
    site_update_manager.superadmin:
        class: AppBundle\Updates\SiteUpdateManager
        autowire: false
        arguments:

    site_update_manager.normal_users:
        class: AppBundle\Updates\SiteUpdateManager
        autowire: false
        arguments:




//Указание конкретного класса в зависимостях сервиса
//@ - означает что передается id сервиса, а не просто строка
services:
    AppBundle\Updates\SiteUpdateManager:
        arguments:
            $logger: '@monolog.logger.request'




//Импорт всех сервисов одновременно
services:
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'





//Параметры окружения
//
parameters:
    env(SECRETS_FILE): '/opt/application/.secrets.json'
    database_password: '%env(key:database_password:json:file:SECRETS_FILE)%'
    # if SECRETS_FILE contents are: {"database_password": "secret"} it returns "secret"

//
parameters:
    # if PRIVATE_KEY is not a valid file path, the content of raw_key is returned
    private_key: '%env(default:raw_key:file:PRIVATE_KEY)%'
    raw_key: '%env(PRIVATE_KEY)%'



//Пример сервиса
class BidService implements BidServiceInterface
{
    private $repository;

    public function __construct(BidRepositoryInterface $repository){
        $this->repository = $repository;
    }

    public function create(){

        $bid = new Bid(...);

        $this->repository->save($bid);

        return $bid;
    }

    public function call(int id){
        $bid = $this->repository->one($id);
    }

    public function accept(){}

    public function reject(int $id){
        $bid = $this->repository->one($id);
        $bid->reject();

        $this->repository->update($id);

        return $bid;
    }
}




//controller
use Symfony\Component\Routing\Annotation\Route;

/**
 * Class BidController
 * @package App\Controller\API\Bids
 */
class Controller extends AbstractController{

    private $bidService;

    public function __construct(BidServiceInterface $bidService)
    {
        $this->bidService = $bidService;
    }

    /**
     * @Route("/api/bids/test", methods={"GET"})
     * @return JsonResponse
     **/
    public function test()
    {
        return $this->json(['hello'])
    }
}
//контроллер может работать только с сервисом




//add the same prefixes to all routes
/config/routes/annotations.yaml
controllers:
    resource: ...
    type: ...
api_bids:
    resource: ../../src/Controller/API/Bids/
    type: annotation
    prefix: '/api/bids'
//After this we can specify:
//@Route("/test", methods={"GET"})





//Initialization service


