
///////////////////////////////////////////////////
////////////////////REPOSITORY/////////////////////
///////////////////////////////////////////////////

//getting an entity repository (extends ServiceEntityRepository)
$repository = $this->getDoctrine()->getRepository(Product::class);
//$repository = $entityManager->getRepository(Product::class);

$repository->find($id);

$repository->findOneBy(['name' => 'Keyboard']);

$repository->findOneBy([
    'name' => 'Keyboard',
    'price' => 1999,
]);

//findBy
$repository->findBy(
    ['name' => 'Keyboard'],
    ['price' => 'ASC'],
    100, //Limit
    100, //Offset
);

//findBy where status in (1, 2, 3)
$assignedPhotos = $this->findBy(['status' => [
            Photo::STATUS_WAITING_FOR_MODERATION,
            Photo::STATUS_MODERATED_BY_1,
            Photo::STATUS_MODERATED_BY_2,
        ]]);

$repository->findAll();




///////////////////////////////////////////////////
//////////////////////MANAGER//////////////////////
///////////////////////////////////////////////////
//getting an instance of Doctrine\ORM\EntityManager
$entityManager = $this->getDoctrine()->getManager();

//create
$product = new Product();
$product->setName('Keyboard');
$entityManager->persist($product);
//execute
$entityManager->flush();

//remove
$entityManager->remove($product);
$entityManager->flush();

//update
$product = $entityManager->getRepository(Product::class)->find($id);
$product->setName('New product name!');
$entityManager->flush();




///////////////////////////////////////////////////
///////////////////QUERY BUILDER///////////////////
///////////////////////////////////////////////////
//from any place
$query = $entityManager->createQuery(
    'SELECT p
    FROM App\Entity\Product p
    WHERE p.price > :price
    ORDER BY p.price ASC'
)->setParameter('price', $price);
$products = $query->getResult();


//inside appropriate repository
//repository knows what entity to use
$qb = $this->createQueryBuilder('p')
    ->where('p.price > :price')
    ->setParameter('price', $price)
    ->orderBy('p.price', 'ASC');

$this->createQueryBuilder("o")
        ->leftJoin("o.products", "p", "WITH", "p.price>:price")
            ->setParameter("price", price)->addSelect("p")
        ->getQuery()->getResult() ;


if (!$includeUnavailableProducts) {
    $qb->andWhere('p.available = TRUE')
}
$query = $qb->getQuery();
$products =  $query->execute();


//custom sql query (inside repository)
$connection = $this->getEntityManager()->getConnection();
$sql = '
    SELECT * FROM product p
    WHERE p.price > :price
    ORDER BY p.price ASC
    ';
$stmt = $connection->prepare($sql);
$stmt->execute(['price' => $price]);
// returns an array of arrays (i.e. a raw data set)
$rawRows = $stmt->fetchAll();


//get table count
$count =  $repository->createQueryBuilder('u')
    ->select('count(u.id)')
    ->getQuery()
    ->getSingleScalarResult();

//WITH JOIN
public function approvedList(EntityManagerInterface $em, PaginatorInterface $paginator, Request $request, $paginationCount)
{
    $query = $em->createQuery("
        SELECT p
        FROM App:Photo p
        JOIN p.source s
        WHERE p.status = :status
        AND s.common = false
        ORDER BY p.id
    ");
    $query->setParameter('status', Photo::STATUS_APPROVED);
    $rows = $query->getResult();
}


///////////////////////////////////////////////////
//////////////////////CONSOLE//////////////////////
///////////////////////////////////////////////////
php bin/console doctrine:query:sql 'SELECT * FROM product'



//divide with divider
//createQueryBuilder с взятием остатка от деления
//by repository
$queryBuilder = $photoRepository->createQueryBuilder('p')
    ->join("p.source", "s", "WITH", "p.status = :status")
    ->setParameter('status', Photo::STATUS_APPROVED)
    ->where("mod(p.id, 10) = :divider")
    ->setParameter('divider', 3)
    ->orderBy('p.id', 'ASC');

$pagination = $paginator->paginate(
    $queryBuilder->getQuery(),
    $request->query->getInt('page', 1),
    $paginationCount
);

//by entity manager
$queryBuilder = $entityManager->createQueryBuilder();
$queryBuilder->select('p')
    ->from('Entity:Photo', 'p')
    ->join("p.source", "s", "WITH", "p.status = :status")
    ->setParameter('status', Photo::STATUS_APPROVED)
    ->where("mod(p.id, 10) IN (:divider)")
    ->setParameter('divider', $range['dividers'])
    ->orderBy('p.id', 'ASC');

$pagination = $paginator->paginate(
    $queryBuilder->getQuery(),
    $request->query->getInt('page', 1),
    $paginationCount
);



//Оптимизация join запросов
//Чтобы Doctrine не лезла каждый раз в базу за связанным объектом
//Нужно при определении связи указать fetch="EAGER" (по умолчанию LAZY)
/**
 * @ORM\ManyToOne(targetEntity="App\Entity\ImageInfo", inversedBy="photos", cascade={"persist"}, fetch="EAGER")
 * @var ImageInfo|null $imageInfo
 */
private $imageInfo;
